SELECT EMPLOYEE.NINUMBER, EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME, DRIVER_REVENUE.NETEARNINGS
FROM employee
JOIN driver ON employee.NINUMBER=driver.EMPLOYEEID
JOIN DRIVER_REVENUE ON driver.driverLicenseID = DRIVER_REVENUE.DRIVERID
GROUP BY EMPLOYEE.NINUMBER, EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME, NETEARNINGS
HAVING NETEARNINGS > 2500
ORDER BY NETEARNINGS DESC;

SELECT ROUND((AVG(OPERATOR.SALARY) - AVG(PAY_TYPE.PAYVALUE)),2) AS SALARYDifference
FROM DRIVER
CROSS JOIN OPERATOR
JOIN DRIVER_REVENUE ON DRIVER_REVENUE.DRIVERID = DRIVER.DRIVERLICENSEID
JOIN PAY_TYPE ON PAY_TYPE.PAYTYPE = DRIVER.PAYTYPE
WHERE DRIVER.PAYTYPE IN (SELECT PAYTYPE 
FROM PAY_TYPE
WHERE PAYTYPE IN ('FIXEDTEMP', 'FIXEDFULL'));

SELECT  Employee.FirstName, employee.LastName, SHIFTID, SHIFTTYPE, SHIFTDATE
FROM employee
JOIN shift ON shift.employeeID=employee.NINUMBER
WHERE ShiftType = 'AFTERNOON' AND ShiftDate BETWEEN '23-NOV-2020' AND '30-NOV-2020';

SELECT employee.FirstName, employee.LastName, employee.PPHONENO
FROM employee
JOIN driver ON employee.NINUMBER=driver.EMPLOYEEID
JOIN cars ON driver.driverLicenseID=cars.DRIVERID
JOIN booking ON booking.DRIVERID=driver.driverLicenseID
WHERE booking.NOOFPASSENGERS BETWEEN 1 AND 4 AND cars.NoOfSeats = 4;

SELECT DRIVER.EmployeeID, DRIVER.PayType, CARS.RegistrationYEAR, CARS.NoOfSeats, CARS.CarStatus, PAY_TYPE.PayType, PAY_TYPE.PayValue
FROM PAY_TYPE 
INNER JOIN DRIVER ON PAY_TYPE.PayType = DRIVER.PayType
INNER JOIN CARS ON CARS.DRIVERID = DRIVER.DRIVERLICENSEID
ORDER BY PAY_TYPE.PayValue ASC;

SELECT REGULAR_BOOKING.RegBookID, REGULAR_BOOKING.ClientID, MAX(REGULAR_BOOKING.BookingFrequency) AS BOOKINGFREQUENCY, REGULAR_BOOKING.StartDate,REGULAR_BOOKING.Duration, CLIENTS.ClientID, CLIENTS.ClientType,CLIENTS.PPhoneNo, CLIENTS.SPhoneNo, CLIENTS.Email
FROM REGULAR_BOOKING 
INNER JOIN CLIENTS ON REGULAR_BOOKING.ClientID = CLIENTS.ClientID
GROUP BY REGULAR_BOOKING.RegBookID, REGULAR_BOOKING.ClientID, REGULAR_BOOKING.StartDate,REGULAR_BOOKING.Duration, CLIENTS.ClientID, CLIENTS.ClientType,CLIENTS.PPhoneNo, CLIENTS.SPhoneNo, CLIENTS.Email 
ORDER BY CLIENTS.ClientType ASC;  

SELECT EMPLOYEE_INCIDENTS.NINumber, EMPLOYEE_INCIDENTS.IncidentType, EMPLOYEE_INCIDENTS.IncidentNotes, EMPLOYEE_INCIDENTS.IncidentDate, EMPLOYEE.NINumber, CITY_LOOKUP.PostCode, CITY_LOOKUP.City
FROM EMPLOYEE_INCIDENTS 
INNER JOIN EMPLOYEE ON EMPLOYEE_INCIDENTS.NINumber = EMPLOYEE.NINumber 
INNER JOIN CITY_LOOKUP ON CITY_LOOKUP.POSTCODE = EMPLOYEE.POSTCODE
WHERE CITY_LOOKUP.PostCode LIKE 'B%' OR CITY_LOOKUP.PostCode LIKE 'N%' OR
CITY_LOOKUP.PostCode LIKE 'NW%' OR CITY_LOOKUP.PostCode LIKE 'M%' OR
CITY_LOOKUP.PostCode LIKE 'SW%' OR CITY_LOOKUP.PostCode LIKE 'W%' OR CITY_LOOKUP.PostCode LIKE 'EN%'
OR CITY_LOOKUP.PostCode LIKE 'L%';

SELECT CLIENTS.CONTACTFNAME, CLIENTS.CONTACTLNAME, PAYMENT.PAYMENTMETHOD, PAYMENT.CARDNUMBER, PAYMENT.AMOUNTPAID FROM CLIENTS
JOIN REGULAR_BOOKING ON CLIENTS.CLIENTID = REGULAR_BOOKING.CLIENTID
JOIN RECURRENT_BOOKING ON REGULAR_BOOKING.REGBOOKID = RECURRENT_BOOKING.REGBOOKID
JOIN BOOKING ON RECURRENT_BOOKING.BOOKINGID = BOOKING.BOOKINGID
JOIN PAYMENT ON BOOKING.BOOKINGID = PAYMENT.BOOKINGID;

SELECT CLIENTS.CONTACTFNAME, CLIENTS.CONTACTLNAME FROM CLIENTS
WHERE EXISTS ( SELECT 1 FROM REGULAR_BOOKING
WHERE REGULAR_BOOKING.CLIENTID = CLIENTS.CLIENTID);

SELECT EMPLOYEE.NINUMBER, EMPLOYEE.FIRSTNAME, EMPLOYEE.LASTNAME, DRIVER_REVENUE.GROSSTAKINGS FROM EMPLOYEE
JOIN DRIVER ON EMPLOYEE.NINUMBER = DRIVER.EMPLOYEEID
JOIN DRIVER_REVENUE ON DRIVER.DRIVERLICENSEID = DRIVER_REVENUE.DRIVERID
WHERE DRIVER.DRIVERLICENSEID = 
(SELECT DRIVER_REVENUE.DRIVERID FROM DRIVER_REVENUE
GROUP BY DRIVER_REVENUE.DRIVERID HAVING SUM(DRIVER_REVENUE.GROSSTAKINGS) = 
(SELECT MAX(SUM(DRIVER_REVENUE.GROSSTAKINGS)) FROM DRIVER_REVENUE GROUP BY DRIVER_REVENUE.DRIVERID));

SELECT COUNT(DISTINCT Driver.DriverLicenseID) AS NUMOFDRIVERS FROM 
BOOKING
INNER JOIN DRIVER ON DRIVER.DRIVERLICENSEID = BOOKING.DRIVERID
WHERE PICKUPDATE BETWEEN '01-AUG-2020' AND '31-AUG-2020';

DELETE FROM EMPLOYEE WHERE NOT EXISTS(SELECT * FROM OPERATOR WHERE OPERATOR.EMPLOYEEID = EMPLOYEE.NINUMBER)
AND NOT EXISTS(SELECT * FROM DRIVER WHERE DRIVER.EMPLOYEEID = EMPLOYEE.NINUMBER);
